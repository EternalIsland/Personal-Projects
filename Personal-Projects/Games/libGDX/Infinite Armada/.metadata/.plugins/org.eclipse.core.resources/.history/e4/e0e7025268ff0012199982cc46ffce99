package com.eternalisland.infinitearmada.actors;

import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureAtlas;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.scenes.scene2d.Actor;
import com.badlogic.gdx.utils.Array;

//import com.badlogic.gdx.graphics.Texture;

public class Player extends Actor {

	private static final int SHIP_WIDTH = 44;
	private static final int SHIP_HEIGHT = 70;
	private static final int GAME_WIDTH = Gdx.graphics.getWidth();
	private static final int GAME_HEIGHT = Gdx.graphics.getHeight();
	Vector2 position, bulletPos;
	Sprite sprite;
	TextureAtlas atlas;
	int velocity;
	Array<Bullet> bullets;
	boolean readyToFire;

	// Texture bulletTex;

	public Player(float x, float y) {
		this.atlas = new TextureAtlas("images/ships.pack");
		this.sprite = atlas.createSprite("player");
		this.setBounds(0, 0, SHIP_WIDTH, SHIP_HEIGHT);
		this.position = new Vector2(x, y);
		this.velocity = 15;
		this.bullets = new Array<Bullet>();
		readyToFire = true;
	}

	@Override
	public void act(float delta) {
		// TODO Auto-generated method stub
		super.act(delta);

		sprite.setPosition(position.x, position.y);

		boolean left = Gdx.input.isKeyPressed(Keys.LEFT);
		boolean right = Gdx.input.isKeyPressed(Keys.RIGHT);
		boolean up = Gdx.input.isKeyPressed(Keys.UP);
		boolean down = Gdx.input.isKeyPressed(Keys.DOWN);
		boolean fire = Gdx.input.isKeyPressed(Keys.SPACE);

		if (bullets.size > 0) {
			for (int i = 0; i < bullets.size; i++) {
				bullets.get(i).update();
				if (bullets.get(i).getPosition().y > GAME_HEIGHT) {
					bullets.removeIndex(i);
				}
			}
		}

		if (left) {
			position.x -= velocity;
		}
		if (right) {
			position.x += velocity;
		}
		if (down) {
			position.y -= velocity;
		}
		if (up) {
			position.y += velocity;
		}
		if (fire) {
			bullets.add(new Bullet(position.x + SHIP_WIDTH / 2, position.y
					+ SHIP_HEIGHT));
			readyToFire = false;
		}

		if (position.x + SHIP_WIDTH > GAME_WIDTH) {
			position.x = GAME_WIDTH - SHIP_WIDTH;
		}
		if (position.x < 0) {
			position.x = 0;
		}
		if (position.y + SHIP_HEIGHT > GAME_HEIGHT) {
			position.y = GAME_HEIGHT - SHIP_HEIGHT;
		}
		if (position.y < 0) {
			position.y = 0;
		}

	}

	public void setVelocity(int vel) {
		this.velocity = vel;
	}

	public Sprite getSprite() {
		return sprite;
	}

	public static int getShipWidth() {
		return SHIP_WIDTH;
	}

	public static int getShipHeight() {
		return SHIP_HEIGHT;
	}

	public float getVelocity() {
		return velocity;
	}

	@Override
	public void draw(SpriteBatch batch, float parentAlpha) {
		// TODO Auto-generated method stub
		sprite.setColor(1, 1, 1, parentAlpha);
		sprite.draw(batch);

		// if (bulletPos != null) {
		// batch.draw(bulletTex, bulletPos.x, bulletPos.y);
		// }

		if (bullets.size > 0) {
			for (Bullet b : bullets) {
				b.draw(batch, parentAlpha);
			}
		}

	}

	public void dispose() {
		atlas.dispose();
	}

}
