package com.eternalisland.infinitearmada.actors;

import com.badlogic.gdx.Game;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input.Keys;
import com.badlogic.gdx.graphics.Color;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.BitmapFont;
import com.badlogic.gdx.graphics.g2d.Sprite;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g2d.TextureAtlas;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.scenes.scene2d.Actor;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.TimeUtils;
import com.eternalisland.infinitearmada.screens.GameOverScreen;
import com.eternalisland.infinitearmada.screens.GameScreen;

public class Player extends Actor {

	private static final int SHIP_WIDTH = 100;
	private static final int SHIP_HEIGHT = 127;
	private static final int GAME_WIDTH = Gdx.graphics.getWidth();
	private static final int GAME_HEIGHT = Gdx.graphics.getHeight();
	Vector2 position, bulletPos;
	Sprite sprite;
	TextureAtlas atlas;
	int velocity;
	Array<Bullet> bullets;
	boolean readyToFire;
	long lastFireTime;
	int score;
	BitmapFont font;
	int health;
	private int bulletDamage;

	public Player(float x, float y) {
		// this.atlas = new TextureAtlas("images/gameships.pack");
		this.sprite = new Sprite(new Texture("images/player.png"));
		this.setBounds(0, 0, SHIP_WIDTH, SHIP_HEIGHT);
		this.position = new Vector2(x, y);
		this.velocity = 15;
		this.bullets = new Array<Bullet>();
		this.readyToFire = true;
		this.health = 100;

		font = new BitmapFont(Gdx.files.internal("font/white.fnt"), false);
		font.setColor(Color.WHITE);
	}

	@Override
	public void act(float delta) {
		super.act(delta);

		sprite.setPosition(position.x, position.y);

		boolean left = Gdx.input.isKeyPressed(Keys.LEFT);
		boolean right = Gdx.input.isKeyPressed(Keys.RIGHT);
		boolean up = Gdx.input.isKeyPressed(Keys.UP);
		boolean down = Gdx.input.isKeyPressed(Keys.DOWN);

		if (bullets.size > 0) {
			for (int i = 0; i < bullets.size; i++) {
				bullets.get(i).update();
				if (bullets.get(i).getPosition().y > GAME_HEIGHT) {
					bullets.removeIndex(i);
				}
			}
		}

		if (left) {
			position.x -= velocity;
		}
		if (right) {
			position.x += velocity;
		}
		if (down) {
			position.y -= velocity;
		}
		if (up) {
			position.y += velocity;
		}
		if (readyToFire) {
			bullets.add(new Bullet(position.x + SHIP_WIDTH / 2, position.y
					+ SHIP_HEIGHT));
			readyToFire = false;
			lastFireTime = TimeUtils.millis();
		}
		if (TimeUtils.millis() - lastFireTime > 300) {
			readyToFire = true;
		}

		if (position.x + SHIP_WIDTH > GAME_WIDTH) {
			position.x = GAME_WIDTH - SHIP_WIDTH;
		}
		if (position.x < 0) {
			position.x = 0;
		}
		if (position.y + SHIP_HEIGHT > GAME_HEIGHT) {
			position.y = GAME_HEIGHT - SHIP_HEIGHT;
		}
		if (position.y < 0) {
			position.y = 0;
		}

	}

	public void setVelocity(int vel) {
		this.velocity = vel;
	}

	public Sprite getSprite() {
		return sprite;
	}

	public static int getShipWidth() {
		return SHIP_WIDTH;
	}

	public static int getShipHeight() {
		return SHIP_HEIGHT;
	}

	public float getVelocity() {
		return velocity;
	}

	@Override
	public void draw(SpriteBatch batch, float parentAlpha) {
		sprite.setColor(1, 1, 1, parentAlpha);
		sprite.draw(batch);

		font.draw(batch, "Score: " + score, 0, GAME_HEIGHT);

		if (bullets.size > 0) {
			for (Bullet b : bullets) {
				b.draw(batch, parentAlpha);
			}
		}

		if (health <= 0) {
			((Game) Gdx.app.getApplicationListener())
					.setScreen(new GameOverScreen(GameScreen.getGame()));
		}

	}

	public void dispose() {
		atlas.dispose();
	}

	public Array<Bullet> bulletList() {
		return bullets;
	}

	public void changeScore(int points) {
		score += points;
	}

	public void changeHealth(int amount) {
		health += amount;
	}

	public void setBulletDamage(int dmg) {
		this.bulletDamage = dmg;

	}

	public int getBulletDamage() {
		return bulletDamage;

	}

}
